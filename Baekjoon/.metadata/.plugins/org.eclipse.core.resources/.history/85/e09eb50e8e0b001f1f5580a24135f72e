package Tier_2;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Ex1103 {
	static int n,m,dp[][],max;
	static char arr[][];
	static int di[] = {-1,1,0,0};
	static int dj[] = {0,0,-1,1};
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		
		arr = new char[n][m];
		dp = new int[n][m];
		
		for(int i=0;i<n;i++) {
			char c[] = br.readLine().toCharArray();
			for(int j=0;j<m;j++) {
				arr[i][j] = c[j];
			}
		}
		
		System.out.println(dfs(0,0));
		
	}
	
	static int dfs(int i, int j) {
		if(arr[i][j]=='H') {
			return dp[i][j];
		}
		if(dp[i][j]!=0) {
			return dp[i][j]; 
		}
		dp[i][j] = 1;
		int dis = arr[i][j];
		for(int d=0;d<4;d++) {
			int ni = i+di[d];
			int nj = j+dj[d];
			if(d<=1) ni*=dis;
			if(d>=2) nj*=dis;
			if(ni>=0 && ni<n && nj>=0 && nj<n) {
				max = Math.max(dp[i][j], dfs(ni,nj)+1);
			}
		}
		return max;
	}
}
